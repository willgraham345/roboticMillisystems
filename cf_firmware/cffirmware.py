# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _cffirmware
else:
    import _cffirmware

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


M_PI_F = _cffirmware.M_PI_F
M_1_PI_F = _cffirmware.M_1_PI_F
M_PI_2_F = _cffirmware.M_PI_2_F

def fsqr(x):
    return _cffirmware.fsqr(x)

def radians(degrees):
    return _cffirmware.radians(degrees)

def degrees(radians):
    return _cffirmware.degrees(radians)

def normalize_radians(radians):
    return _cffirmware.normalize_radians(radians)

def fmodf_floored(x, n):
    return _cffirmware.fmodf_floored(x, n)

def shortest_signed_angle_radians(start, goal):
    return _cffirmware.shortest_signed_angle_radians(start, goal)

def clamp(value, min, max):
    return _cffirmware.clamp(value, min, max)

def fcloseulps(a, b, ulps):
    return _cffirmware.fcloseulps(a, b, ulps)
class vec(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cffirmware.vec_x_get, _cffirmware.vec_x_set)
    y = property(_cffirmware.vec_y_get, _cffirmware.vec_y_set)
    z = property(_cffirmware.vec_z_get, _cffirmware.vec_z_set)

    def __init__(self, x):
        _cffirmware.vec_swiginit(self, _cffirmware.new_vec(x))
    __swig_destroy__ = _cffirmware.delete_vec

    def __repr__(self):
        return "({}, {}, {})".format(self.x, self.y, self.z)

    def __array__(self):
        return np.array([self.x, self.y, self.z])

    def __len__(self):
        return 3

    def __getitem__(self, i):
        if 0 <= i and i < 3:
            return _cffirmware.vindex(self, i)
        else:
            raise IndexError("vec index must be in {0, 1, 2}.")

    # Unary operator overloads.
    def __neg__(self):
        return _cffirmware.vneg(self)

    # Vector-scalar binary operator overloads.
    def __rmul__(self, s):
        return _cffirmware.vscl(s, self)

    def __div__(self, s):
        return self.__truediv__(s)

    def __truediv__(self, s):
        return _cffirmware.vdiv(self, s)

    # Vector-vector binary operator overloads.
    def __add__(self, other):
        return _cffirmware.vadd(self, other)

    def __sub__(self, other):
        return _cffirmware.vsub(self, other)


# Register vec in _cffirmware:
_cffirmware.vec_swigregister(vec)


def mkvec(x, y, z):
    return _cffirmware.mkvec(x, y, z)

def vrepeat(x):
    return _cffirmware.vrepeat(x)

def vzero():
    return _cffirmware.vzero()

def vbasis(i):
    return _cffirmware.vbasis(i)

def vscl(s, v):
    return _cffirmware.vscl(s, v)

def vneg(v):
    return _cffirmware.vneg(v)

def vdiv(v, s):
    return _cffirmware.vdiv(v, s)

def vadd(a, b):
    return _cffirmware.vadd(a, b)

def vsub(a, b):
    return _cffirmware.vsub(a, b)

def vdot(a, b):
    return _cffirmware.vdot(a, b)

def veltmul(a, b):
    return _cffirmware.veltmul(a, b)

def veltdiv(a, b):
    return _cffirmware.veltdiv(a, b)

def veltrecip(a):
    return _cffirmware.veltrecip(a)

def vmag2(v):
    return _cffirmware.vmag2(v)

def vmag(v):
    return _cffirmware.vmag(v)

def vdist2(a, b):
    return _cffirmware.vdist2(a, b)

def vdist(a, b):
    return _cffirmware.vdist(a, b)

def vnormalize(v):
    return _cffirmware.vnormalize(v)

def vclampnorm(v, maxnorm):
    return _cffirmware.vclampnorm(v, maxnorm)

def vcross(a, b):
    return _cffirmware.vcross(a, b)

def vprojectunit(a, b_unit):
    return _cffirmware.vprojectunit(a, b_unit)

def vorthunit(a, b_unit):
    return _cffirmware.vorthunit(a, b_unit)

def vabs(v):
    return _cffirmware.vabs(v)

def vmin(a, b):
    return _cffirmware.vmin(a, b)

def vmax(a, b):
    return _cffirmware.vmax(a, b)

def vclamp(v, lower, upper):
    return _cffirmware.vclamp(v, lower, upper)

def vclampabs(v, abs_upper):
    return _cffirmware.vclampabs(v, abs_upper)

def vmaxelt(v):
    return _cffirmware.vmaxelt(v)

def vminelt(v):
    return _cffirmware.vminelt(v)

def vnorm1(v):
    return _cffirmware.vnorm1(v)

def veq(a, b):
    return _cffirmware.veq(a, b)

def vneq(a, b):
    return _cffirmware.vneq(a, b)

def veqepsilon(a, b, epsilon):
    return _cffirmware.veqepsilon(a, b, epsilon)

def vless(a, b):
    return _cffirmware.vless(a, b)

def vleq(a, b):
    return _cffirmware.vleq(a, b)

def vgreater(a, b):
    return _cffirmware.vgreater(a, b)

def vgeq(a, b):
    return _cffirmware.vgeq(a, b)

def visnan(v):
    return _cffirmware.visnan(v)

def vadd3(a, b, c):
    return _cffirmware.vadd3(a, b, c)

def vadd4(a, b, c, d):
    return _cffirmware.vadd4(a, b, c, d)

def vsub2(a, b, c):
    return _cffirmware.vsub2(a, b, c)

def vload(d):
    return _cffirmware.vload(d)

def vstore(v, d):
    return _cffirmware.vstore(v, d)

def vloadf(f):
    return _cffirmware.vloadf(f)

def vstoref(v, f):
    return _cffirmware.vstoref(v, f)

def vindex(v, i):
    return _cffirmware.vindex(v, i)
class mat33(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m = property(_cffirmware.mat33_m_get, _cffirmware.mat33_m_set)

    def __init__(self):
        _cffirmware.mat33_swiginit(self, _cffirmware.new_mat33())
    __swig_destroy__ = _cffirmware.delete_mat33

# Register mat33 in _cffirmware:
_cffirmware.mat33_swigregister(mat33)


def mzero():
    return _cffirmware.mzero()

def mdiag(a, b, c):
    return _cffirmware.mdiag(a, b, c)

def meyescl(a):
    return _cffirmware.meyescl(a)

def meye():
    return _cffirmware.meye()

def mcolumns(a, b, c):
    return _cffirmware.mcolumns(a, b, c)

def mrows(a, b, c):
    return _cffirmware.mrows(a, b, c)

def mcrossmat(v):
    return _cffirmware.mcrossmat(v)

def mcolumn(m, col):
    return _cffirmware.mcolumn(m, col)

def mrow(m, row):
    return _cffirmware.mrow(m, row)

def mtranspose(m):
    return _cffirmware.mtranspose(m)

def mscl(s, a):
    return _cffirmware.mscl(s, a)

def mneg(a):
    return _cffirmware.mneg(a)

def madd(a, b):
    return _cffirmware.madd(a, b)

def msub(a, b):
    return _cffirmware.msub(a, b)

def mvmul(a, v):
    return _cffirmware.mvmul(a, v)

def mmul(a, b):
    return _cffirmware.mmul(a, b)

def maddridge(a, d):
    return _cffirmware.maddridge(a, d)

def misnan(m):
    return _cffirmware.misnan(m)

def set_block33_rowmaj(block, stride, m):
    return _cffirmware.set_block33_rowmaj(block, stride, m)

def madd3(a, b, c):
    return _cffirmware.madd3(a, b, c)

def maxisangle(axis, angle):
    return _cffirmware.maxisangle(axis, angle)

def mrotx(angle):
    return _cffirmware.mrotx(angle)

def mroty(angle):
    return _cffirmware.mroty(angle)

def mrotz(angle):
    return _cffirmware.mrotz(angle)
class quat(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cffirmware.quat_x_get, _cffirmware.quat_x_set)
    y = property(_cffirmware.quat_y_get, _cffirmware.quat_y_set)
    z = property(_cffirmware.quat_z_get, _cffirmware.quat_z_set)
    w = property(_cffirmware.quat_w_get, _cffirmware.quat_w_set)

    def __init__(self):
        _cffirmware.quat_swiginit(self, _cffirmware.new_quat())
    __swig_destroy__ = _cffirmware.delete_quat

# Register quat in _cffirmware:
_cffirmware.quat_swigregister(quat)


def mkquat(x, y, z, w):
    return _cffirmware.mkquat(x, y, z, w)

def quatvw(v, w):
    return _cffirmware.quatvw(v, w)

def qeye():
    return _cffirmware.qeye()

def qaxisangle(axis, angle):
    return _cffirmware.qaxisangle(axis, angle)

def qnormalize(q):
    return _cffirmware.qnormalize(q)

def qvectovec(a, b):
    return _cffirmware.qvectovec(a, b)

def rpy2quat(rpy):
    return _cffirmware.rpy2quat(rpy)

def rpy2quat_small(rpy):
    return _cffirmware.rpy2quat_small(rpy)

def mat2quat(m):
    return _cffirmware.mat2quat(m)

def quat2rpy(q):
    return _cffirmware.quat2rpy(q)

def quat2axis(q):
    return _cffirmware.quat2axis(q)

def quat2angle(q):
    return _cffirmware.quat2angle(q)

def quatimagpart(q):
    return _cffirmware.quatimagpart(q)

def quat2rotmat(q):
    return _cffirmware.quat2rotmat(q)

def qvrot(q, v):
    return _cffirmware.qvrot(q, v)

def qqmul(q, p):
    return _cffirmware.qqmul(q, p)

def qinv(q):
    return _cffirmware.qinv(q)

def qneg(q):
    return _cffirmware.qneg(q)

def qposreal(q):
    return _cffirmware.qposreal(q)

def qdot(a, b):
    return _cffirmware.qdot(a, b)

def qanglebetween(a, b):
    return _cffirmware.qanglebetween(a, b)

def qeq(a, b):
    return _cffirmware.qeq(a, b)

def quat_gyro_update(quat, gyro, dt):
    return _cffirmware.quat_gyro_update(quat, gyro, dt)

def qnlerp(a, b, t):
    return _cffirmware.qnlerp(a, b, t)

def qslerp(a, b, t):
    return _cffirmware.qslerp(a, b, t)

def qload(d):
    return _cffirmware.qload(d)

def qstore(q, d):
    return _cffirmware.qstore(q, d)

def qloadf(f):
    return _cffirmware.qloadf(f)

def qstoref(q, f):
    return _cffirmware.qstoref(q, f)

def vprojecthalfspace(x, a_unit, b):
    return _cffirmware.vprojecthalfspace(x, a_unit, b)

def vinpolytope(v, A, b, n, tolerance):
    return _cffirmware.vinpolytope(v, A, b, n, tolerance)

def rayintersectpolytope(origin, direction, A, b, n, active_row):
    return _cffirmware.rayintersectpolytope(origin, direction, A, b, n, active_row)

def vprojectpolytope(v, A, b, work, n, tolerance, maxiters):
    return _cffirmware.vprojectpolytope(v, A, b, work, n, tolerance, maxiters)
PP_DEGREE = _cffirmware.PP_DEGREE
PP_SIZE = _cffirmware.PP_SIZE

def polyval(p, t):
    return _cffirmware.polyval(p, t)

def polylinear(p, duration, x0, x1):
    return _cffirmware.polylinear(p, duration, x0, x1)

def polybezier(p, duration, x, dim):
    return _cffirmware.polybezier(p, duration, x, dim)

def poly5(poly, T, x0, dx0, ddx0, xf, dxf, ddxf):
    return _cffirmware.poly5(poly, T, x0, dx0, ddx0, xf, dxf, ddxf)

def polyscale(p, s):
    return _cffirmware.polyscale(p, s)

def polyder(p):
    return _cffirmware.polyder(p)

def polystretchtime(p, s):
    return _cffirmware.polystretchtime(p, s)

def polyreflect(p):
    return _cffirmware.polyreflect(p)
class poly4d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    p = property(_cffirmware.poly4d_p_get, _cffirmware.poly4d_p_set)
    duration = property(_cffirmware.poly4d_duration_get, _cffirmware.poly4d_duration_set)

    def __init__(self):
        _cffirmware.poly4d_swiginit(self, _cffirmware.new_poly4d())
    __swig_destroy__ = _cffirmware.delete_poly4d

# Register poly4d in _cffirmware:
_cffirmware.poly4d_swigregister(poly4d)


def poly4d_zero(duration):
    return _cffirmware.poly4d_zero(duration)

def poly4d_linear(duration, p0, p1, yaw0, yaw1):
    return _cffirmware.poly4d_linear(duration, p0, p1, yaw0, yaw1)

def poly4d_scale(p, x, y, z, yaw):
    return _cffirmware.poly4d_scale(p, x, y, z, yaw)

def poly4d_shift(p, x, y, z, yaw):
    return _cffirmware.poly4d_shift(p, x, y, z, yaw)

def poly4d_shift_vec(p, pos, yaw):
    return _cffirmware.poly4d_shift_vec(p, pos, yaw)

def poly4d_stretchtime(p, s):
    return _cffirmware.poly4d_stretchtime(p, s)

def polyder4d(p):
    return _cffirmware.polyder4d(p)

def poly4d_max_accel_approx(p):
    return _cffirmware.poly4d_max_accel_approx(p)
class traj_eval(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pos = property(_cffirmware.traj_eval_pos_get, _cffirmware.traj_eval_pos_set)
    vel = property(_cffirmware.traj_eval_vel_get, _cffirmware.traj_eval_vel_set)
    acc = property(_cffirmware.traj_eval_acc_get, _cffirmware.traj_eval_acc_set)
    omega = property(_cffirmware.traj_eval_omega_get, _cffirmware.traj_eval_omega_set)
    yaw = property(_cffirmware.traj_eval_yaw_get, _cffirmware.traj_eval_yaw_set)

    def __init__(self, x):
        _cffirmware.traj_eval_swiginit(self, _cffirmware.new_traj_eval(x))
    __swig_destroy__ = _cffirmware.delete_traj_eval

# Register traj_eval in _cffirmware:
_cffirmware.traj_eval_swigregister(traj_eval)


def traj_eval_zero():
    return _cffirmware.traj_eval_zero()

def traj_eval_invalid():
    return _cffirmware.traj_eval_invalid()

def is_traj_eval_valid(ev):
    return _cffirmware.is_traj_eval_valid(ev)

def poly4d_eval(p, t):
    return _cffirmware.poly4d_eval(p, t)
class piecewise_traj(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    t_begin = property(_cffirmware.piecewise_traj_t_begin_get, _cffirmware.piecewise_traj_t_begin_set)
    timescale = property(_cffirmware.piecewise_traj_timescale_get, _cffirmware.piecewise_traj_timescale_set)
    shift = property(_cffirmware.piecewise_traj_shift_get, _cffirmware.piecewise_traj_shift_set)
    n_pieces = property(_cffirmware.piecewise_traj_n_pieces_get, _cffirmware.piecewise_traj_n_pieces_set)
    pieces = property(_cffirmware.piecewise_traj_pieces_get, _cffirmware.piecewise_traj_pieces_set)

    def __init__(self):
        _cffirmware.piecewise_traj_swiginit(self, _cffirmware.new_piecewise_traj())
    __swig_destroy__ = _cffirmware.delete_piecewise_traj

# Register piecewise_traj in _cffirmware:
_cffirmware.piecewise_traj_swigregister(piecewise_traj)


def piecewise_duration(pp):
    return _cffirmware.piecewise_duration(pp)

def piecewise_plan_5th_order(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1):
    return _cffirmware.piecewise_plan_5th_order(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1)

def piecewise_plan_7th_order_no_jerk(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1):
    return _cffirmware.piecewise_plan_7th_order_no_jerk(p, duration, p0, y0, v0, dy0, a0, p1, y1, v1, dy1, a1)

def piecewise_eval(traj, t):
    return _cffirmware.piecewise_eval(traj, t)

def piecewise_eval_reversed(traj, t):
    return _cffirmware.piecewise_eval_reversed(traj, t)

def piecewise_is_finished(traj, t):
    return _cffirmware.piecewise_is_finished(traj, t)
TRAJECTORY_STATE_IDLE = _cffirmware.TRAJECTORY_STATE_IDLE
TRAJECTORY_STATE_FLYING = _cffirmware.TRAJECTORY_STATE_FLYING
TRAJECTORY_STATE_LANDING = _cffirmware.TRAJECTORY_STATE_LANDING
TRAJECTORY_STATE_DISABLED = _cffirmware.TRAJECTORY_STATE_DISABLED
TRAJECTORY_TYPE_PIECEWISE = _cffirmware.TRAJECTORY_TYPE_PIECEWISE
TRAJECTORY_TYPE_PIECEWISE_COMPRESSED = _cffirmware.TRAJECTORY_TYPE_PIECEWISE_COMPRESSED
class planner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    state = property(_cffirmware.planner_state_get, _cffirmware.planner_state_set)
    type = property(_cffirmware.planner_type_get, _cffirmware.planner_type_set)
    reversed = property(_cffirmware.planner_reversed_get, _cffirmware.planner_reversed_set)
    trajectory = property(_cffirmware.planner_trajectory_get, _cffirmware.planner_trajectory_set)
    compressed_trajectory = property(_cffirmware.planner_compressed_trajectory_get, _cffirmware.planner_compressed_trajectory_set)
    planned_trajectory = property(_cffirmware.planner_planned_trajectory_get, _cffirmware.planner_planned_trajectory_set)
    pieces = property(_cffirmware.planner_pieces_get, _cffirmware.planner_pieces_set)

    def __init__(self):
        _cffirmware.planner_swiginit(self, _cffirmware.new_planner())
    __swig_destroy__ = _cffirmware.delete_planner

# Register planner in _cffirmware:
_cffirmware.planner_swigregister(planner)


def plan_init(p):
    return _cffirmware.plan_init(p)

def plan_stop(p):
    return _cffirmware.plan_stop(p)

def plan_is_stopped(p):
    return _cffirmware.plan_is_stopped(p)

def plan_disable(p):
    return _cffirmware.plan_disable(p)

def plan_is_disabled(p):
    return _cffirmware.plan_is_disabled(p)

def plan_current_goal(p, t):
    return _cffirmware.plan_current_goal(p, t)

def plan_takeoff(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t):
    return _cffirmware.plan_takeoff(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t)

def plan_land(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t):
    return _cffirmware.plan_land(p, curr_pos, curr_yaw, hover_height, hover_yaw, duration, t)

def plan_go_to(p, relative, hover_pos, hover_yaw, duration, t):
    return _cffirmware.plan_go_to(p, relative, hover_pos, hover_yaw, duration, t)

def plan_go_to_from(p, curr_eval, relative, hover_pos, hover_yaw, duration, t):
    return _cffirmware.plan_go_to_from(p, curr_eval, relative, hover_pos, hover_yaw, duration, t)

def plan_start_trajectory(p, trajectory, reversed, relative, start_from):
    return _cffirmware.plan_start_trajectory(p, trajectory, reversed, relative, start_from)

def plan_start_compressed_trajectory(p, trajectory, relative, start_from):
    return _cffirmware.plan_start_compressed_trajectory(p, trajectory, relative, start_from)

def plan_is_finished(p, t):
    return _cffirmware.plan_is_finished(p, t)
class attitude_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_cffirmware.attitude_t_timestamp_get, _cffirmware.attitude_t_timestamp_set)
    roll = property(_cffirmware.attitude_t_roll_get, _cffirmware.attitude_t_roll_set)
    pitch = property(_cffirmware.attitude_t_pitch_get, _cffirmware.attitude_t_pitch_set)
    yaw = property(_cffirmware.attitude_t_yaw_get, _cffirmware.attitude_t_yaw_set)

    def __init__(self):
        _cffirmware.attitude_t_swiginit(self, _cffirmware.new_attitude_t())
    __swig_destroy__ = _cffirmware.delete_attitude_t

# Register attitude_t in _cffirmware:
_cffirmware.attitude_t_swigregister(attitude_t)

vec3d_size = _cffirmware.vec3d_size
class vec3_s(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_cffirmware.vec3_s_timestamp_get, _cffirmware.vec3_s_timestamp_set)
    x = property(_cffirmware.vec3_s_x_get, _cffirmware.vec3_s_x_set)
    y = property(_cffirmware.vec3_s_y_get, _cffirmware.vec3_s_y_set)
    z = property(_cffirmware.vec3_s_z_get, _cffirmware.vec3_s_z_set)

    def __init__(self):
        _cffirmware.vec3_s_swiginit(self, _cffirmware.new_vec3_s())
    __swig_destroy__ = _cffirmware.delete_vec3_s

# Register vec3_s in _cffirmware:
_cffirmware.vec3_s_swigregister(vec3_s)

class quaternion_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_cffirmware.quaternion_t_timestamp_get, _cffirmware.quaternion_t_timestamp_set)
    q0 = property(_cffirmware.quaternion_t_q0_get, _cffirmware.quaternion_t_q0_set)
    q1 = property(_cffirmware.quaternion_t_q1_get, _cffirmware.quaternion_t_q1_set)
    q2 = property(_cffirmware.quaternion_t_q2_get, _cffirmware.quaternion_t_q2_set)
    q3 = property(_cffirmware.quaternion_t_q3_get, _cffirmware.quaternion_t_q3_set)
    x = property(_cffirmware.quaternion_t_x_get, _cffirmware.quaternion_t_x_set)
    y = property(_cffirmware.quaternion_t_y_get, _cffirmware.quaternion_t_y_set)
    z = property(_cffirmware.quaternion_t_z_get, _cffirmware.quaternion_t_z_set)
    w = property(_cffirmware.quaternion_t_w_get, _cffirmware.quaternion_t_w_set)

    def __init__(self):
        _cffirmware.quaternion_t_swiginit(self, _cffirmware.new_quaternion_t())
    __swig_destroy__ = _cffirmware.delete_quaternion_t

# Register quaternion_t in _cffirmware:
_cffirmware.quaternion_t_swigregister(quaternion_t)

MeasurementSourceLocationService = _cffirmware.MeasurementSourceLocationService
MeasurementSourceLighthouse = _cffirmware.MeasurementSourceLighthouse
class tdoaMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    anchorPositions = property(_cffirmware.tdoaMeasurement_t_anchorPositions_get, _cffirmware.tdoaMeasurement_t_anchorPositions_set)
    anchorIds = property(_cffirmware.tdoaMeasurement_t_anchorIds_get, _cffirmware.tdoaMeasurement_t_anchorIds_set)
    distanceDiff = property(_cffirmware.tdoaMeasurement_t_distanceDiff_get, _cffirmware.tdoaMeasurement_t_distanceDiff_set)
    stdDev = property(_cffirmware.tdoaMeasurement_t_stdDev_get, _cffirmware.tdoaMeasurement_t_stdDev_set)

    def __init__(self):
        _cffirmware.tdoaMeasurement_t_swiginit(self, _cffirmware.new_tdoaMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_tdoaMeasurement_t

# Register tdoaMeasurement_t in _cffirmware:
_cffirmware.tdoaMeasurement_t_swigregister(tdoaMeasurement_t)

class baro_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    pressure = property(_cffirmware.baro_t_pressure_get, _cffirmware.baro_t_pressure_set)
    temperature = property(_cffirmware.baro_t_temperature_get, _cffirmware.baro_t_temperature_set)
    asl = property(_cffirmware.baro_t_asl_get, _cffirmware.baro_t_asl_set)

    def __init__(self):
        _cffirmware.baro_t_swiginit(self, _cffirmware.new_baro_t())
    __swig_destroy__ = _cffirmware.delete_baro_t

# Register baro_t in _cffirmware:
_cffirmware.baro_t_swigregister(baro_t)

class positionMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cffirmware.positionMeasurement_t_x_get, _cffirmware.positionMeasurement_t_x_set)
    y = property(_cffirmware.positionMeasurement_t_y_get, _cffirmware.positionMeasurement_t_y_set)
    z = property(_cffirmware.positionMeasurement_t_z_get, _cffirmware.positionMeasurement_t_z_set)
    pos = property(_cffirmware.positionMeasurement_t_pos_get, _cffirmware.positionMeasurement_t_pos_set)
    stdDev = property(_cffirmware.positionMeasurement_t_stdDev_get, _cffirmware.positionMeasurement_t_stdDev_set)
    source = property(_cffirmware.positionMeasurement_t_source_get, _cffirmware.positionMeasurement_t_source_set)

    def __init__(self):
        _cffirmware.positionMeasurement_t_swiginit(self, _cffirmware.new_positionMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_positionMeasurement_t

# Register positionMeasurement_t in _cffirmware:
_cffirmware.positionMeasurement_t_swigregister(positionMeasurement_t)

class poseMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cffirmware.poseMeasurement_t_x_get, _cffirmware.poseMeasurement_t_x_set)
    y = property(_cffirmware.poseMeasurement_t_y_get, _cffirmware.poseMeasurement_t_y_set)
    z = property(_cffirmware.poseMeasurement_t_z_get, _cffirmware.poseMeasurement_t_z_set)
    pos = property(_cffirmware.poseMeasurement_t_pos_get, _cffirmware.poseMeasurement_t_pos_set)
    quat = property(_cffirmware.poseMeasurement_t_quat_get, _cffirmware.poseMeasurement_t_quat_set)
    stdDevPos = property(_cffirmware.poseMeasurement_t_stdDevPos_get, _cffirmware.poseMeasurement_t_stdDevPos_set)
    stdDevQuat = property(_cffirmware.poseMeasurement_t_stdDevQuat_get, _cffirmware.poseMeasurement_t_stdDevQuat_set)

    def __init__(self):
        _cffirmware.poseMeasurement_t_swiginit(self, _cffirmware.new_poseMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_poseMeasurement_t

# Register poseMeasurement_t in _cffirmware:
_cffirmware.poseMeasurement_t_swigregister(poseMeasurement_t)

class distanceMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cffirmware.distanceMeasurement_t_x_get, _cffirmware.distanceMeasurement_t_x_set)
    y = property(_cffirmware.distanceMeasurement_t_y_get, _cffirmware.distanceMeasurement_t_y_set)
    z = property(_cffirmware.distanceMeasurement_t_z_get, _cffirmware.distanceMeasurement_t_z_set)
    pos = property(_cffirmware.distanceMeasurement_t_pos_get, _cffirmware.distanceMeasurement_t_pos_set)
    anchorId = property(_cffirmware.distanceMeasurement_t_anchorId_get, _cffirmware.distanceMeasurement_t_anchorId_set)
    distance = property(_cffirmware.distanceMeasurement_t_distance_get, _cffirmware.distanceMeasurement_t_distance_set)
    stdDev = property(_cffirmware.distanceMeasurement_t_stdDev_get, _cffirmware.distanceMeasurement_t_stdDev_set)

    def __init__(self):
        _cffirmware.distanceMeasurement_t_swiginit(self, _cffirmware.new_distanceMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_distanceMeasurement_t

# Register distanceMeasurement_t in _cffirmware:
_cffirmware.distanceMeasurement_t_swigregister(distanceMeasurement_t)

class zDistance_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_cffirmware.zDistance_t_timestamp_get, _cffirmware.zDistance_t_timestamp_set)
    distance = property(_cffirmware.zDistance_t_distance_get, _cffirmware.zDistance_t_distance_set)

    def __init__(self):
        _cffirmware.zDistance_t_swiginit(self, _cffirmware.new_zDistance_t())
    __swig_destroy__ = _cffirmware.delete_zDistance_t

# Register zDistance_t in _cffirmware:
_cffirmware.zDistance_t_swigregister(zDistance_t)

class sensorData_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    acc = property(_cffirmware.sensorData_t_acc_get, _cffirmware.sensorData_t_acc_set)
    gyro = property(_cffirmware.sensorData_t_gyro_get, _cffirmware.sensorData_t_gyro_set)
    mag = property(_cffirmware.sensorData_t_mag_get, _cffirmware.sensorData_t_mag_set)
    baro = property(_cffirmware.sensorData_t_baro_get, _cffirmware.sensorData_t_baro_set)
    interruptTimestamp = property(_cffirmware.sensorData_t_interruptTimestamp_get, _cffirmware.sensorData_t_interruptTimestamp_set)

    def __init__(self):
        _cffirmware.sensorData_t_swiginit(self, _cffirmware.new_sensorData_t())
    __swig_destroy__ = _cffirmware.delete_sensorData_t

# Register sensorData_t in _cffirmware:
_cffirmware.sensorData_t_swigregister(sensorData_t)

class state_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    attitude = property(_cffirmware.state_t_attitude_get, _cffirmware.state_t_attitude_set)
    attitudeQuaternion = property(_cffirmware.state_t_attitudeQuaternion_get, _cffirmware.state_t_attitudeQuaternion_set)
    position = property(_cffirmware.state_t_position_get, _cffirmware.state_t_position_set)
    velocity = property(_cffirmware.state_t_velocity_get, _cffirmware.state_t_velocity_set)
    acc = property(_cffirmware.state_t_acc_get, _cffirmware.state_t_acc_set)

    def __init__(self):
        _cffirmware.state_t_swiginit(self, _cffirmware.new_state_t())
    __swig_destroy__ = _cffirmware.delete_state_t

# Register state_t in _cffirmware:
_cffirmware.state_t_swigregister(state_t)

STABILIZER_NR_OF_MOTORS = _cffirmware.STABILIZER_NR_OF_MOTORS
controlModeLegacy = _cffirmware.controlModeLegacy
controlModeForceTorque = _cffirmware.controlModeForceTorque
controlModeForce = _cffirmware.controlModeForce
class control_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    roll = property(_cffirmware.control_t_roll_get, _cffirmware.control_t_roll_set)
    pitch = property(_cffirmware.control_t_pitch_get, _cffirmware.control_t_pitch_set)
    yaw = property(_cffirmware.control_t_yaw_get, _cffirmware.control_t_yaw_set)
    thrust = property(_cffirmware.control_t_thrust_get, _cffirmware.control_t_thrust_set)
    thrustSi = property(_cffirmware.control_t_thrustSi_get, _cffirmware.control_t_thrustSi_set)
    torque = property(_cffirmware.control_t_torque_get, _cffirmware.control_t_torque_set)
    torqueX = property(_cffirmware.control_t_torqueX_get, _cffirmware.control_t_torqueX_set)
    torqueY = property(_cffirmware.control_t_torqueY_get, _cffirmware.control_t_torqueY_set)
    torqueZ = property(_cffirmware.control_t_torqueZ_get, _cffirmware.control_t_torqueZ_set)
    normalizedForces = property(_cffirmware.control_t_normalizedForces_get, _cffirmware.control_t_normalizedForces_set)
    controlMode = property(_cffirmware.control_t_controlMode_get, _cffirmware.control_t_controlMode_set)

    def __init__(self):
        _cffirmware.control_t_swiginit(self, _cffirmware.new_control_t())
    __swig_destroy__ = _cffirmware.delete_control_t

# Register control_t in _cffirmware:
_cffirmware.control_t_swigregister(control_t)

class motors_thrust_uncapped_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    list = property(_cffirmware.motors_thrust_uncapped_t_list_get, _cffirmware.motors_thrust_uncapped_t_list_set)
    motors = property(_cffirmware.motors_thrust_uncapped_t_motors_get)

    def __init__(self):
        _cffirmware.motors_thrust_uncapped_t_swiginit(self, _cffirmware.new_motors_thrust_uncapped_t())
    __swig_destroy__ = _cffirmware.delete_motors_thrust_uncapped_t

# Register motors_thrust_uncapped_t in _cffirmware:
_cffirmware.motors_thrust_uncapped_t_swigregister(motors_thrust_uncapped_t)

class motors_thrust_uncapped_t_motors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m1 = property(_cffirmware.motors_thrust_uncapped_t_motors_m1_get, _cffirmware.motors_thrust_uncapped_t_motors_m1_set)
    m2 = property(_cffirmware.motors_thrust_uncapped_t_motors_m2_get, _cffirmware.motors_thrust_uncapped_t_motors_m2_set)
    m3 = property(_cffirmware.motors_thrust_uncapped_t_motors_m3_get, _cffirmware.motors_thrust_uncapped_t_motors_m3_set)
    m4 = property(_cffirmware.motors_thrust_uncapped_t_motors_m4_get, _cffirmware.motors_thrust_uncapped_t_motors_m4_set)

    def __init__(self):
        _cffirmware.motors_thrust_uncapped_t_motors_swiginit(self, _cffirmware.new_motors_thrust_uncapped_t_motors())
    __swig_destroy__ = _cffirmware.delete_motors_thrust_uncapped_t_motors

# Register motors_thrust_uncapped_t_motors in _cffirmware:
_cffirmware.motors_thrust_uncapped_t_motors_swigregister(motors_thrust_uncapped_t_motors)

class motors_thrust_pwm_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    list = property(_cffirmware.motors_thrust_pwm_t_list_get, _cffirmware.motors_thrust_pwm_t_list_set)
    motors = property(_cffirmware.motors_thrust_pwm_t_motors_get)

    def __init__(self):
        _cffirmware.motors_thrust_pwm_t_swiginit(self, _cffirmware.new_motors_thrust_pwm_t())
    __swig_destroy__ = _cffirmware.delete_motors_thrust_pwm_t

# Register motors_thrust_pwm_t in _cffirmware:
_cffirmware.motors_thrust_pwm_t_swigregister(motors_thrust_pwm_t)

class motors_thrust_pwm_t_motors(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    m1 = property(_cffirmware.motors_thrust_pwm_t_motors_m1_get, _cffirmware.motors_thrust_pwm_t_motors_m1_set)
    m2 = property(_cffirmware.motors_thrust_pwm_t_motors_m2_get, _cffirmware.motors_thrust_pwm_t_motors_m2_set)
    m3 = property(_cffirmware.motors_thrust_pwm_t_motors_m3_get, _cffirmware.motors_thrust_pwm_t_motors_m3_set)
    m4 = property(_cffirmware.motors_thrust_pwm_t_motors_m4_get, _cffirmware.motors_thrust_pwm_t_motors_m4_set)

    def __init__(self):
        _cffirmware.motors_thrust_pwm_t_motors_swiginit(self, _cffirmware.new_motors_thrust_pwm_t_motors())
    __swig_destroy__ = _cffirmware.delete_motors_thrust_pwm_t_motors

# Register motors_thrust_pwm_t_motors in _cffirmware:
_cffirmware.motors_thrust_pwm_t_motors_swigregister(motors_thrust_pwm_t_motors)

modeDisable = _cffirmware.modeDisable
modeAbs = _cffirmware.modeAbs
modeVelocity = _cffirmware.modeVelocity
class setpoint_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_cffirmware.setpoint_t_timestamp_get, _cffirmware.setpoint_t_timestamp_set)
    attitude = property(_cffirmware.setpoint_t_attitude_get, _cffirmware.setpoint_t_attitude_set)
    attitudeRate = property(_cffirmware.setpoint_t_attitudeRate_get, _cffirmware.setpoint_t_attitudeRate_set)
    attitudeQuaternion = property(_cffirmware.setpoint_t_attitudeQuaternion_get, _cffirmware.setpoint_t_attitudeQuaternion_set)
    thrust = property(_cffirmware.setpoint_t_thrust_get, _cffirmware.setpoint_t_thrust_set)
    position = property(_cffirmware.setpoint_t_position_get, _cffirmware.setpoint_t_position_set)
    velocity = property(_cffirmware.setpoint_t_velocity_get, _cffirmware.setpoint_t_velocity_set)
    acceleration = property(_cffirmware.setpoint_t_acceleration_get, _cffirmware.setpoint_t_acceleration_set)
    velocity_body = property(_cffirmware.setpoint_t_velocity_body_get, _cffirmware.setpoint_t_velocity_body_set)
    mode = property(_cffirmware.setpoint_t_mode_get)

    def __init__(self):
        _cffirmware.setpoint_t_swiginit(self, _cffirmware.new_setpoint_t())
    __swig_destroy__ = _cffirmware.delete_setpoint_t

# Register setpoint_t in _cffirmware:
_cffirmware.setpoint_t_swigregister(setpoint_t)

class setpoint_s_mode(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cffirmware.setpoint_s_mode_x_get, _cffirmware.setpoint_s_mode_x_set)
    y = property(_cffirmware.setpoint_s_mode_y_get, _cffirmware.setpoint_s_mode_y_set)
    z = property(_cffirmware.setpoint_s_mode_z_get, _cffirmware.setpoint_s_mode_z_set)
    roll = property(_cffirmware.setpoint_s_mode_roll_get, _cffirmware.setpoint_s_mode_roll_set)
    pitch = property(_cffirmware.setpoint_s_mode_pitch_get, _cffirmware.setpoint_s_mode_pitch_set)
    yaw = property(_cffirmware.setpoint_s_mode_yaw_get, _cffirmware.setpoint_s_mode_yaw_set)
    quat = property(_cffirmware.setpoint_s_mode_quat_get, _cffirmware.setpoint_s_mode_quat_set)

    def __init__(self):
        _cffirmware.setpoint_s_mode_swiginit(self, _cffirmware.new_setpoint_s_mode())
    __swig_destroy__ = _cffirmware.delete_setpoint_s_mode

# Register setpoint_s_mode in _cffirmware:
_cffirmware.setpoint_s_mode_swigregister(setpoint_s_mode)

class estimate_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_cffirmware.estimate_t_timestamp_get, _cffirmware.estimate_t_timestamp_set)
    position = property(_cffirmware.estimate_t_position_get, _cffirmware.estimate_t_position_set)

    def __init__(self):
        _cffirmware.estimate_t_swiginit(self, _cffirmware.new_estimate_t())
    __swig_destroy__ = _cffirmware.delete_estimate_t

# Register estimate_t in _cffirmware:
_cffirmware.estimate_t_swigregister(estimate_t)

class setpointZ_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    z = property(_cffirmware.setpointZ_t_z_get, _cffirmware.setpointZ_t_z_set)
    isUpdate = property(_cffirmware.setpointZ_t_isUpdate_get, _cffirmware.setpointZ_t_isUpdate_set)

    def __init__(self):
        _cffirmware.setpointZ_t_swiginit(self, _cffirmware.new_setpointZ_t())
    __swig_destroy__ = _cffirmware.delete_setpointZ_t

# Register setpointZ_t in _cffirmware:
_cffirmware.setpointZ_t_swigregister(setpointZ_t)

class flowMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_cffirmware.flowMeasurement_t_timestamp_get, _cffirmware.flowMeasurement_t_timestamp_set)
    dpixelx = property(_cffirmware.flowMeasurement_t_dpixelx_get, _cffirmware.flowMeasurement_t_dpixelx_set)
    dpixely = property(_cffirmware.flowMeasurement_t_dpixely_get, _cffirmware.flowMeasurement_t_dpixely_set)
    dpixel = property(_cffirmware.flowMeasurement_t_dpixel_get, _cffirmware.flowMeasurement_t_dpixel_set)
    stdDevX = property(_cffirmware.flowMeasurement_t_stdDevX_get, _cffirmware.flowMeasurement_t_stdDevX_set)
    stdDevY = property(_cffirmware.flowMeasurement_t_stdDevY_get, _cffirmware.flowMeasurement_t_stdDevY_set)
    dt = property(_cffirmware.flowMeasurement_t_dt_get, _cffirmware.flowMeasurement_t_dt_set)

    def __init__(self):
        _cffirmware.flowMeasurement_t_swiginit(self, _cffirmware.new_flowMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_flowMeasurement_t

# Register flowMeasurement_t in _cffirmware:
_cffirmware.flowMeasurement_t_swigregister(flowMeasurement_t)

class tofMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_cffirmware.tofMeasurement_t_timestamp_get, _cffirmware.tofMeasurement_t_timestamp_set)
    distance = property(_cffirmware.tofMeasurement_t_distance_get, _cffirmware.tofMeasurement_t_distance_set)
    stdDev = property(_cffirmware.tofMeasurement_t_stdDev_get, _cffirmware.tofMeasurement_t_stdDev_set)

    def __init__(self):
        _cffirmware.tofMeasurement_t_swiginit(self, _cffirmware.new_tofMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_tofMeasurement_t

# Register tofMeasurement_t in _cffirmware:
_cffirmware.tofMeasurement_t_swigregister(tofMeasurement_t)

class heightMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_cffirmware.heightMeasurement_t_timestamp_get, _cffirmware.heightMeasurement_t_timestamp_set)
    height = property(_cffirmware.heightMeasurement_t_height_get, _cffirmware.heightMeasurement_t_height_set)
    stdDev = property(_cffirmware.heightMeasurement_t_stdDev_get, _cffirmware.heightMeasurement_t_stdDev_set)

    def __init__(self):
        _cffirmware.heightMeasurement_t_swiginit(self, _cffirmware.new_heightMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_heightMeasurement_t

# Register heightMeasurement_t in _cffirmware:
_cffirmware.heightMeasurement_t_swigregister(heightMeasurement_t)

class yawErrorMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_cffirmware.yawErrorMeasurement_t_timestamp_get, _cffirmware.yawErrorMeasurement_t_timestamp_set)
    yawError = property(_cffirmware.yawErrorMeasurement_t_yawError_get, _cffirmware.yawErrorMeasurement_t_yawError_set)
    stdDev = property(_cffirmware.yawErrorMeasurement_t_stdDev_get, _cffirmware.yawErrorMeasurement_t_stdDev_set)

    def __init__(self):
        _cffirmware.yawErrorMeasurement_t_swiginit(self, _cffirmware.new_yawErrorMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_yawErrorMeasurement_t

# Register yawErrorMeasurement_t in _cffirmware:
_cffirmware.yawErrorMeasurement_t_swigregister(yawErrorMeasurement_t)

class sweepAngleMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    timestamp = property(_cffirmware.sweepAngleMeasurement_t_timestamp_get, _cffirmware.sweepAngleMeasurement_t_timestamp_set)
    sensorPos = property(_cffirmware.sweepAngleMeasurement_t_sensorPos_get, _cffirmware.sweepAngleMeasurement_t_sensorPos_set)
    rotorPos = property(_cffirmware.sweepAngleMeasurement_t_rotorPos_get, _cffirmware.sweepAngleMeasurement_t_rotorPos_set)
    rotorRot = property(_cffirmware.sweepAngleMeasurement_t_rotorRot_get, _cffirmware.sweepAngleMeasurement_t_rotorRot_set)
    rotorRotInv = property(_cffirmware.sweepAngleMeasurement_t_rotorRotInv_get, _cffirmware.sweepAngleMeasurement_t_rotorRotInv_set)
    sensorId = property(_cffirmware.sweepAngleMeasurement_t_sensorId_get, _cffirmware.sweepAngleMeasurement_t_sensorId_set)
    baseStationId = property(_cffirmware.sweepAngleMeasurement_t_baseStationId_get, _cffirmware.sweepAngleMeasurement_t_baseStationId_set)
    sweepId = property(_cffirmware.sweepAngleMeasurement_t_sweepId_get, _cffirmware.sweepAngleMeasurement_t_sweepId_set)
    t = property(_cffirmware.sweepAngleMeasurement_t_t_get, _cffirmware.sweepAngleMeasurement_t_t_set)
    measuredSweepAngle = property(_cffirmware.sweepAngleMeasurement_t_measuredSweepAngle_get, _cffirmware.sweepAngleMeasurement_t_measuredSweepAngle_set)
    stdDev = property(_cffirmware.sweepAngleMeasurement_t_stdDev_get, _cffirmware.sweepAngleMeasurement_t_stdDev_set)
    calib = property(_cffirmware.sweepAngleMeasurement_t_calib_get, _cffirmware.sweepAngleMeasurement_t_calib_set)
    calibrationMeasurementModel = property(_cffirmware.sweepAngleMeasurement_t_calibrationMeasurementModel_get, _cffirmware.sweepAngleMeasurement_t_calibrationMeasurementModel_set)

    def __init__(self):
        _cffirmware.sweepAngleMeasurement_t_swiginit(self, _cffirmware.new_sweepAngleMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_sweepAngleMeasurement_t

# Register sweepAngleMeasurement_t in _cffirmware:
_cffirmware.sweepAngleMeasurement_t_swigregister(sweepAngleMeasurement_t)

class gyroscopeMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    gyro = property(_cffirmware.gyroscopeMeasurement_t_gyro_get, _cffirmware.gyroscopeMeasurement_t_gyro_set)

    def __init__(self):
        _cffirmware.gyroscopeMeasurement_t_swiginit(self, _cffirmware.new_gyroscopeMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_gyroscopeMeasurement_t

# Register gyroscopeMeasurement_t in _cffirmware:
_cffirmware.gyroscopeMeasurement_t_swigregister(gyroscopeMeasurement_t)

class accelerationMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    acc = property(_cffirmware.accelerationMeasurement_t_acc_get, _cffirmware.accelerationMeasurement_t_acc_set)

    def __init__(self):
        _cffirmware.accelerationMeasurement_t_swiginit(self, _cffirmware.new_accelerationMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_accelerationMeasurement_t

# Register accelerationMeasurement_t in _cffirmware:
_cffirmware.accelerationMeasurement_t_swigregister(accelerationMeasurement_t)

class barometerMeasurement_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    baro = property(_cffirmware.barometerMeasurement_t_baro_get, _cffirmware.barometerMeasurement_t_baro_set)

    def __init__(self):
        _cffirmware.barometerMeasurement_t_swiginit(self, _cffirmware.new_barometerMeasurement_t())
    __swig_destroy__ = _cffirmware.delete_barometerMeasurement_t

# Register barometerMeasurement_t in _cffirmware:
_cffirmware.barometerMeasurement_t_swigregister(barometerMeasurement_t)

RATE_1000_HZ = _cffirmware.RATE_1000_HZ
RATE_500_HZ = _cffirmware.RATE_500_HZ
RATE_250_HZ = _cffirmware.RATE_250_HZ
RATE_100_HZ = _cffirmware.RATE_100_HZ
RATE_50_HZ = _cffirmware.RATE_50_HZ
RATE_25_HZ = _cffirmware.RATE_25_HZ
RATE_MAIN_LOOP = _cffirmware.RATE_MAIN_LOOP
ATTITUDE_RATE = _cffirmware.ATTITUDE_RATE
POSITION_RATE = _cffirmware.POSITION_RATE
RATE_HL_COMMANDER = _cffirmware.RATE_HL_COMMANDER
class collision_avoidance_params_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ellipsoidRadii = property(_cffirmware.collision_avoidance_params_t_ellipsoidRadii_get, _cffirmware.collision_avoidance_params_t_ellipsoidRadii_set)
    bboxMin = property(_cffirmware.collision_avoidance_params_t_bboxMin_get, _cffirmware.collision_avoidance_params_t_bboxMin_set)
    bboxMax = property(_cffirmware.collision_avoidance_params_t_bboxMax_get, _cffirmware.collision_avoidance_params_t_bboxMax_set)
    horizonSecs = property(_cffirmware.collision_avoidance_params_t_horizonSecs_get, _cffirmware.collision_avoidance_params_t_horizonSecs_set)
    maxSpeed = property(_cffirmware.collision_avoidance_params_t_maxSpeed_get, _cffirmware.collision_avoidance_params_t_maxSpeed_set)
    sidestepThreshold = property(_cffirmware.collision_avoidance_params_t_sidestepThreshold_get, _cffirmware.collision_avoidance_params_t_sidestepThreshold_set)
    maxPeerLocAgeMillis = property(_cffirmware.collision_avoidance_params_t_maxPeerLocAgeMillis_get, _cffirmware.collision_avoidance_params_t_maxPeerLocAgeMillis_set)
    voronoiProjectionTolerance = property(_cffirmware.collision_avoidance_params_t_voronoiProjectionTolerance_get, _cffirmware.collision_avoidance_params_t_voronoiProjectionTolerance_set)
    voronoiProjectionMaxIters = property(_cffirmware.collision_avoidance_params_t_voronoiProjectionMaxIters_get, _cffirmware.collision_avoidance_params_t_voronoiProjectionMaxIters_set)

    def __init__(self):
        _cffirmware.collision_avoidance_params_t_swiginit(self, _cffirmware.new_collision_avoidance_params_t())
    __swig_destroy__ = _cffirmware.delete_collision_avoidance_params_t

# Register collision_avoidance_params_t in _cffirmware:
_cffirmware.collision_avoidance_params_t_swigregister(collision_avoidance_params_t)

class collision_avoidance_state_t(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    lastFeasibleSetPosition = property(_cffirmware.collision_avoidance_state_t_lastFeasibleSetPosition_get, _cffirmware.collision_avoidance_state_t_lastFeasibleSetPosition_set)

    def __init__(self):
        _cffirmware.collision_avoidance_state_t_swiginit(self, _cffirmware.new_collision_avoidance_state_t())
    __swig_destroy__ = _cffirmware.delete_collision_avoidance_state_t

# Register collision_avoidance_state_t in _cffirmware:
_cffirmware.collision_avoidance_state_t_swigregister(collision_avoidance_state_t)


def collisionAvoidanceUpdateSetpointCore(params, collisionState, nOthers, otherPositions, workspace, setpoint, sensorData, state):
    return _cffirmware.collisionAvoidanceUpdateSetpointCore(params, collisionState, nOthers, otherPositions, workspace, setpoint, sensorData, state)

def controllerPidInit():
    return _cffirmware.controllerPidInit()

def controllerPidTest():
    return _cffirmware.controllerPidTest()

def controllerPid(control, setpoint, sensors, state, tick):
    return _cffirmware.controllerPid(control, setpoint, sensors, state, tick)
class Axis3i16(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cffirmware.Axis3i16_x_get, _cffirmware.Axis3i16_x_set)
    y = property(_cffirmware.Axis3i16_y_get, _cffirmware.Axis3i16_y_set)
    z = property(_cffirmware.Axis3i16_z_get, _cffirmware.Axis3i16_z_set)
    axis = property(_cffirmware.Axis3i16_axis_get, _cffirmware.Axis3i16_axis_set)

    def __init__(self):
        _cffirmware.Axis3i16_swiginit(self, _cffirmware.new_Axis3i16())
    __swig_destroy__ = _cffirmware.delete_Axis3i16

# Register Axis3i16 in _cffirmware:
_cffirmware.Axis3i16_swigregister(Axis3i16)

class Axis3i32(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cffirmware.Axis3i32_x_get, _cffirmware.Axis3i32_x_set)
    y = property(_cffirmware.Axis3i32_y_get, _cffirmware.Axis3i32_y_set)
    z = property(_cffirmware.Axis3i32_z_get, _cffirmware.Axis3i32_z_set)
    axis = property(_cffirmware.Axis3i32_axis_get, _cffirmware.Axis3i32_axis_set)

    def __init__(self):
        _cffirmware.Axis3i32_swiginit(self, _cffirmware.new_Axis3i32())
    __swig_destroy__ = _cffirmware.delete_Axis3i32

# Register Axis3i32 in _cffirmware:
_cffirmware.Axis3i32_swigregister(Axis3i32)

class Axis3i64(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cffirmware.Axis3i64_x_get, _cffirmware.Axis3i64_x_set)
    y = property(_cffirmware.Axis3i64_y_get, _cffirmware.Axis3i64_y_set)
    z = property(_cffirmware.Axis3i64_z_get, _cffirmware.Axis3i64_z_set)
    axis = property(_cffirmware.Axis3i64_axis_get, _cffirmware.Axis3i64_axis_set)

    def __init__(self):
        _cffirmware.Axis3i64_swiginit(self, _cffirmware.new_Axis3i64())
    __swig_destroy__ = _cffirmware.delete_Axis3i64

# Register Axis3i64 in _cffirmware:
_cffirmware.Axis3i64_swigregister(Axis3i64)

class Axis3f(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    x = property(_cffirmware.Axis3f_x_get, _cffirmware.Axis3f_x_set)
    y = property(_cffirmware.Axis3f_y_get, _cffirmware.Axis3f_y_set)
    z = property(_cffirmware.Axis3f_z_get, _cffirmware.Axis3f_z_set)
    axis = property(_cffirmware.Axis3f_axis_get, _cffirmware.Axis3f_axis_set)

    def __init__(self):
        _cffirmware.Axis3f_swiginit(self, _cffirmware.new_Axis3f())
    __swig_destroy__ = _cffirmware.delete_Axis3f

# Register Axis3f in _cffirmware:
_cffirmware.Axis3f_swigregister(Axis3f)


def controllerMellingerInit():
    return _cffirmware.controllerMellingerInit()

def controllerMellingerTest():
    return _cffirmware.controllerMellingerTest()

def controllerMellinger(control, setpoint, sensors, state, tick):
    return _cffirmware.controllerMellinger(control, setpoint, sensors, state, tick)

def controllerBrescianiniInit():
    return _cffirmware.controllerBrescianiniInit()

def controllerBrescianiniTest():
    return _cffirmware.controllerBrescianiniTest()

def controllerBrescianini(control, setpoint, sensors, state, tick):
    return _cffirmware.controllerBrescianini(control, setpoint, sensors, state, tick)

def powerDistributionInit():
    return _cffirmware.powerDistributionInit()

def powerDistributionTest():
    return _cffirmware.powerDistributionTest()

def powerDistribution(control, motorThrustUncapped):
    return _cffirmware.powerDistribution(control, motorThrustUncapped)

def powerDistributionCap(motorThrustBatCompUncapped, motorPwm):
    return _cffirmware.powerDistributionCap(motorThrustBatCompUncapped, motorPwm)

def powerDistributionMotorType(id):
    return _cffirmware.powerDistributionMotorType(id)

def powerDistributionStopRatio(id):
    return _cffirmware.powerDistributionStopRatio(id)

def piecewise_get(pp, i):
    return _cffirmware.piecewise_get(pp, i)

def poly4d_set(poly, dim, coef, val):
    return _cffirmware.poly4d_set(poly, dim, coef, val)

def poly4d_get(poly, dim, coef):
    return _cffirmware.poly4d_get(poly, dim, coef)

def poly4d_malloc(size):
    return _cffirmware.poly4d_malloc(size)

def poly4d_free(p):
    return _cffirmware.poly4d_free(p)

def vec2svec(v):
    return _cffirmware.vec2svec(v)

def svec2vec(v):
    return _cffirmware.svec2vec(v)

def collisionAvoidanceUpdateSetpointWrap(params, collisionState, nOthers, otherPositions, setpoint, sensorData, state):
    return _cffirmware.collisionAvoidanceUpdateSetpointWrap(params, collisionState, nOthers, otherPositions, setpoint, sensorData, state)

import numpy as np



